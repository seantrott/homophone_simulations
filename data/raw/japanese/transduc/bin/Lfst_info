#!/pkg/bin/perl
###############################################################################
# This software is being provided to you, the LICENSEE, by the Linguistic     #
# Data Consortium (LDC) and the University of Pennsylvania (UPENN) under the  #
# following license.  By obtaining, using and/or copying this software, you   #
# agree that you have read, understood, and will comply with these terms and  #
# conditions:                                                                 #
#                                                                             #
#      This program is free software; you can redistribute it and/or modify   #
#      it under the terms of the GNU General Public License as published by   #
#      the Free Software Foundation; either version 1, or (at your option)    #
#      any later version.                                                     #
#                                                                             #
#      This program is distributed in the hope that it will be useful,        #
#      but WITHOUT ANY WARRANTY; without even the implied warranty of         #
#      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          #
#      GNU General Public License (GNU_COPYRIGHT) at the same directory       #
#      for more details.                                                      #
#                                                                             #
# Copyright 1995 by the University of Pennsylvania.  All rights reserved.     #
#                                                                             #
# THIS SOFTWARE IS PROVIDED "AS IS"; LDC AND UPENN MAKE NO REPRESENTATIONS OR #
# WARRANTIES, EXPRESS OR IMPLIED.  By way of example, but not limitation,     #
# LDC AND UPENN MAKE NO REPRESENTATIONS OR WARRANTIES OF MERCHANTABILITY OR   #
# FITNESS FOR ANY PARTICULAR PURPOSE.                                         #
###############################################################################
# lfst_info.pl Version 0.1 March 31 1995 written by Zhibiao Wu
# This program rearange the arc list of a finite traducer into a good format.
# The format of arc_list_file is: tape1 tape2 tape3 ... state1 state2
# Default states: START, 0;  END, 1.
# The output files are: fst data file read by the transducer. 

$lsi = 0;
$pos_num = 0;
$num_of_chars = 0;
$fn = "";
$g = 1;
$state_info = "";
$arc_info = 0;
$input = 0;
$checkset = 0;

while ($_ = $ARGV[0], /^-/) {
 shift;
 last if /^--$/;
 /^-o/ && ($fn = shift);
 /^-l/ && ($lsi = 1);
 /^-a/ && ($arc_info = shift);
 /^-i/ && ($input = shift);
 /^-s/ && ($state_info = shift);
 /^-p/ && ($charset = 1);
 /^-n/ && ($g = 0);
 /^-h/ && (print "Usage: fst_info.pl option filename.\n")
       && (print "       -a arc_string: Print out the info about the arc, : as delimiter.\n")
       && (print "       -i input_string: Specify the input string, Default is 0.\n")
       && (print "       -l: write out the state index file.\n")
       && (print "       -n: Don't print out general info about the fst.\n")
       && (print "       -o filename : Output the transducer readable format to FILE.\n")
       && (print "       -p: Mapping of POS to character, Encoding output with -o.\n")
       && (print "       -s state_name: Print out the info about the state.\n")
       && (exit(1));
}

$sort_by_name = 0;
$sort_all = 0;
$no_name_output = 0;
$num_of_tapes = 0;

$shift_count = 0;

$num_of_columns = 0;
$stateindex{'START'} = '0';
$indexstate[0] = 'START';
$stateindex{'END'} = '1';
$indexstate[1] = 'END';
$num_of_states = 2;
$num_of_arcs = 0;
$max_of_strs = 0;
$error = 0;

# Read in each line
# Set index for newly encounted states

$line = 0;
while (<>) {
    chop;
    s/\t$//g;
    s/ *$//g;
    print STDERR "$.\n" if ($. == int($./1000) * 1000);
    $line++;
    if ((!/^#/) && ($_ ne "")) {
        split;
	if ($num_of_columns == 0) {
         $num_of_columns = @_;
	 $num_of_tapes = $num_of_columns - 2;
        }
	if (@_ != $num_of_columns) {
         printf(STDERR "Columns not %d, Line=%d: %s\n",$num_of_columns,$line,$_);
         $error = 1;
        }
        &get_charset;
        if (($stateindex{@_[$num_of_columns - 1]})  || 
             (@_[$num_of_columns - 1] eq "START")) {
        } else {
         $stateindex{@_[$num_of_columns - 1]} = $num_of_states;
	 $indexstate[$num_of_states] = @_[$num_of_columns - 1];
         $num_of_states++;
        }

        if (($stateindex{@_[$num_of_columns - 2]})  || 
             (@_[$num_of_columns - 2] eq "START")) {
        } else {
         $stateindex{@_[$num_of_columns - 2]} = $num_of_states;
	 $indexstate[$num_of_states] = @_[$num_of_columns - 2];
	 $num_of_states++;
        }

        $out{@_[$num_of_columns - 2]} = 1;
        $in{@_[$num_of_columns - 1]} = 1;

        $arcc[$num_of_arcs] = $stateindex{@_[$num_of_columns - 2]};
        for ($i = 0; $i < $num_of_columns - 2; $i++) {
         if (length(@_[$i]) > $max_of_strs) {
          $max_of_strs = length(@_[$i]);
         }
          $arcc[$num_of_arcs] = $arcc[$num_of_arcs] . "\t" . @_[$i];
        }
        $arcc[$num_of_arcs] = $arcc[$num_of_arcs] . "\t" .
            $stateindex{@_[$num_of_columns - 1]};
    
        $num_of_arcs++;
   }
}


foreach $s (keys %stateindex) {
 if ($out{$s}) {
  if ($s eq "END") {
   print STDERR "END has out arc!\n";
#   $error = 1;
  }
 } else {
  if ($s ne "END") {
   print STDERR "State $s has no out arc!\n" ;
   $error = 1;
  }
 }
 if ($in{$s}) {
  if ($s eq "START") {
   print STDERR "START has in arc!\n";
#   $error = 1;
  }
 } else {
  if ($s ne "START") {
   print STDERR "State $s has no in arc!\n";
   $error = 1;
  }
 }
}

&map_char;


 print STDERR "Following are the the POS found in the file,\n";
 print STDERR "Please check to make sure they are correct.\n";
 foreach $p (keys %pos) {
  print STDERR "$p ";
 }
 print STDERR "\n";

if (($fn ne "") && ($error == 0)) {
 open(F,">$fn");
 select(F);
 print STDERR "Write to file $fn, Please wait ... \n";
 if ($charset == 1) {
  print "LFST GL MAP\n";
 } else {
  print "LFST GL \n";
 }
 $nn = $num_of_chars + $pos_num;
 print "$num_of_states\t$num_of_arcs\t$num_of_tapes\t$max_of_strs\t$nn\t$pos_num\n";
 foreach (keys %chars) {
  print "$_ ";
 }
 foreach $p (keys %pos) {
  print "$pos{$p} ";
 }
 print "\n";
 foreach $p (keys %pos) {
  print "$p $pos{$p} ";
 }
 print "\n";


foreach (@arcc) {
 split(/\t/);
 print "@_[0]\t@_[$num_of_columns - 1]";
 for ($i = 1; $i < $num_of_columns - 1; $i++) {
  if ($charset == 1) {
   print "\t";
   @a = split(/\+/,@_[$i]);
   print @a[0];
   for ($j = 1; $j < @a; $j++) {
    print $pos{"+@a[$j]"};
   }
  } else {
    print "\t@_[$i]";
  }
 }
 print "\n";
}

if ($lsi) {
open(F2, "> lfst.state_index");
foreach $s (keys %stateindex) {
 print F2 "$s\t$stateindex{$s}\n";
}

close(F2);
}
}
sub bystring {$datakeys[$a] cmp $datakeys[$b];}

if ($g) {
 print STDERR "General information about the FST:\n";
 print STDERR "Number of states is $num_of_states.\n";
 print STDERR "Number of arcs is $num_of_arcs.\n";
 print STDERR "Maxium length on one tape is $max_of_strs.\n";
}

$st = "";
if ($state_info ne "") {
 if ($state_info =~ /\D/) {
  $st = $state_info;
 } else {
  $st = $indexstate[$state_info];
 }
 if ($st eq "") {
  print STDERR "state $state_info not found in FST\n";
 } else {
  print STDERR "Information about state $st, Index $stateindex{$st}:\n";
  $inarc = 0;
  foreach $i (0 .. $num_of_arcs - 1) {
   split(/\t/,$arcc[$i]);
   if ($stateindex{$st} eq (@_[$num_of_columns - 1])) {
    $in[$inarc] = $i;
    $inarc++;
   }
  }
  print STDERR "Number of in arcs is $inarc.\n";
  foreach $i ( 0 .. $inarc - 1) {
   split(/\t/, $arcc[$in[$i]]);
   print STDERR "$indexstate[@_[0]]\t@_[0]\t$indexstate[@_[$num_of_columns -1]]\t@_[$num_of_columns - 1]";
   foreach $j (1 .. @_ - 2) {
    print STDERR "\t@_[$j]";
   }
   print STDERR "\n";
  }

  $outarc = 0;
  foreach $i (0 .. $num_of_arcs - 1) {
   split(/\t/,$arcc[$i]);
   if ($stateindex{$st} eq (@_[0])) {
    $out[$outarc] = $i;
    $outarc++;
   }
  }
  print STDERR "Number of out arcs is $outarc.\n";
  foreach $i ( 0 .. $outarc - 1) {
   split(/\t/, $arcc[$out[$i]]);
   print STDERR "$indexstate[@_[0]]\t@_[0]\t$indexstate[@_[$num_of_columns -1]]\t@_[$num_of_columns - 1]";
   foreach $j (1 .. @_ - 2) {
    print STDERR "\t@_[$j]";
   }
   print STDERR "\n";
  }
 }
}


if ($arc_info) {
 @arclist = grep (/$arc_info/, @arcc);
 $l = length(@arclist);
 print STDERR "Number of matched arcs are $l.\n";
 foreach (@arclist) {
   split(/\t/);
   print STDERR "$indexstate[@_[0]]\t@_[0]\t$indexstate[@_[$num_of_columns -1]]\t@_[$num_of_columns - 1]";
   foreach $j (1 .. @_ - 2) {
    print STDERR "\t@_[$j]";
   }
   print STDERR "\n";
 }
}

sub get_charset {
 local (@a, @b);
 @a = split;
 @a[@a - 1] = "";
 @a[@a - 2] = "";
 foreach (@a) {
  if ($charset == 1) {
   @b = split(/\+/);
   foreach $i (0..@b-1) {
    if ($i == 0) {
     @c = split(//,@b[0]);
     foreach (@c) {
      if (!$chars{$_}) { 
       $chars{$_} = 1; $num_of_chars++;
      }
     }
    } else {
     $pos{"+@b[$i]"} = $pos_num++ if (!$pos{"+@b[$i]"});
    }
   }
  } else {
   @b = split(//);
   foreach (@b) {
      if (!$chars{$_}) { 
       $chars{$_} = 1; $num_of_chars++;
      }
   }
  }
 }
}

sub map_char {
# Reserve some keys 
  $used[unpack("C"," ")] = 1;
  $used[unpack("C","_")] = 1;
  $used[unpack("C","\t")] = 1;
  $used[unpack("C","\n")] = 1;
  $used[unpack("C","+")] = 1;
  $used[unpack("C","=")] = 1;
  $used[unpack("C","@")] = 1;
  $used[unpack("C","#")] = 1;
  $used[0x7f] = 1;

# Reserve contral character
  for ($i=0;$i<0x20;$i++) {
   $used[$i] = 1;
  }
 if ($num_of_chars + $pos_num < 256 - 6 - 32) {
  foreach $c (keys %chars) {
   $used[unpack("C",$c)] = 1;
  }


  $i = 1;
  foreach $p (keys %pos) {
   while ($used[$i]) {
    $i++;
   }
   $used[$i] = 1;
   $pos{$p} = pack("C",$i);
  }
 } elsif ($pos_num < 256 - 32) {
  $i = 32;
  foreach $p (keys %pos) {
   $pos{$p} = '+' . pack("C",$i);
   $i++;
  }
 } else {
# No mapping output when there are too many POS.
  print STDERR "Too many POS, map to self.\n";
  $pos_num = 0;
 }
}

if ($error == 1) {
 print STDERR "\n\nHay .... Error exists, GLFST file not generated!\n\n\n";
}

if (($fn ne "") && ($error == 0)) {
 close(F);
}

exit(0);
